// Booking Page JavaScript
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô

class BookingPage {
    constructor() {
        this.currentStep = 1;
        this.selectedStadium = null;
        this.bookingManager = null;
        this.currentBooking = null;
        this.paymentSlipFile = null;
        
        this.init();
    }

    async init() {
        try {
            // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase
            if (typeof supabaseClient === 'undefined') {
                throw new Error('Supabase client not found');
            }
            
            this.bookingManager = new BookingManager(supabaseClient);
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°
            await this.loadStadiums();
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
            this.setupEventListeners();
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            this.setupDateRestrictions();
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
            this.generateTimeOptions();
            
        } catch (error) {
            console.error('Error initializing booking page:', error);
            this.showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
        }
    }

    async loadStadiums() {
        try {
            this.showLoading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°...');

            const { data, error } = await supabaseClient
                .from('stadiums')
                .select('*')
                .eq('status', 'active')
                .order('name');

            if (error) throw error;

            this.renderStadiums(data);
            this.hideLoading();

        } catch (error) {
            console.error('Error loading stadiums:', error);
            this.hideLoading();
            this.showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ô‡∏≤‡∏°‡πÑ‡∏î‡πâ', 'error');
        }
    }

    renderStadiums(stadiums) {
        const stadiumGrid = document.getElementById('stadiumGrid');
        stadiumGrid.innerHTML = '';

        stadiums.forEach(stadium => {
            const stadiumCard = document.createElement('div');
            stadiumCard.className = 'stadium-card';
            stadiumCard.dataset.stadium = JSON.stringify(stadium);
            
            stadiumCard.innerHTML = `
                <div class="stadium-name">${stadium.name}</div>
                <div class="stadium-info">
                    <div class="stadium-detail">
                        <span>üìç</span>
                        <span>${stadium.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'}</span>
                    </div>
                    <div class="stadium-detail">
                        <span>‚è∞</span>
                        <span>‡πÄ‡∏õ‡∏¥‡∏î ${stadium.open_time} - ${stadium.close_time}</span>
                    </div>
                    <div class="stadium-detail">
                        <span>üìû</span>
                        <span>${stadium.phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'}</span>
                    </div>
                    ${stadium.description ? `
                        <div class="stadium-detail">
                            <span>‚ÑπÔ∏è</span>
                            <span>${stadium.description}</span>
                        </div>
                    ` : ''}
                </div>
                <div class="stadium-price">‡∏ø${stadium.price_per_hour}/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</div>
            `;

            stadiumCard.addEventListener('click', () => this.selectStadium(stadium, stadiumCard));
            stadiumGrid.appendChild(stadiumCard);
        });
    }

    selectStadium(stadium, cardElement) {
        // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡πà‡∏≤
        document.querySelectorAll('.stadium-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
        cardElement.classList.add('selected');
        this.selectedStadium = stadium;
        
        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        document.getElementById('nextBtn').disabled = false;
    }

    setupEventListeners() {
        // Navigation buttons
        document.getElementById('nextBtn').addEventListener('click', () => this.nextStep());
        document.getElementById('prevBtn').addEventListener('click', () => this.prevStep());
        document.getElementById('submitBtn').addEventListener('click', () => this.submitBooking());

        // Form inputs
        document.getElementById('timeFrom').addEventListener('change', () => this.updateTimeOptions());
        document.getElementById('timeTo').addEventListener('change', () => this.calculatePrice());
        document.getElementById('bookingDate').addEventListener('change', () => this.checkConflicts());

        // Payment method
        document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
            radio.addEventListener('change', () => this.updatePaymentInfo());
        });

        // File upload
        document.getElementById('paymentSlip').addEventListener('change', (e) => this.handleFileUpload(e));

        // Modal close
        document.querySelector('.close').addEventListener('click', () => this.hideAlert());
        document.getElementById('modalOkBtn').addEventListener('click', () => this.hideAlert());
    }

    setupDateRestrictions() {
        const today = new Date();
        const minDate = today.toISOString().split('T')[0];
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        document.getElementById('bookingDate').min = minDate;
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô 30 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        const maxDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000));
        document.getElementById('bookingDate').max = maxDate.toISOString().split('T')[0];
    }

    generateTimeOptions() {
        const timeFromSelect = document.getElementById('timeFrom');
        const timeToSelect = document.getElementById('timeTo');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å 06:00 ‡∏ñ‡∏∂‡∏á 22:00
        for (let hour = 6; hour <= 22; hour++) {
            for (let minute = 0; minute < 60; minute += 30) {
                const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                
                const optionFrom = document.createElement('option');
                optionFrom.value = timeString;
                optionFrom.textContent = timeString;
                timeFromSelect.appendChild(optionFrom);
                
                if (hour < 22 || (hour === 22 && minute === 0)) {
                    const optionTo = document.createElement('option');
                    optionTo.value = timeString;
                    optionTo.textContent = timeString;
                    timeToSelect.appendChild(optionTo);
                }
            }
        }
    }

    updateTimeOptions() {
        const timeFrom = document.getElementById('timeFrom').value;
        const timeTo = document.getElementById('timeTo');
        
        if (!timeFrom) return;
        
        // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        timeTo.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤</option>';
        
        const [fromHour, fromMinute] = timeFrom.split(':').map(Number);
        let fromTotalMinutes = fromHour * 60 + fromMinute;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
        for (let hour = 6; hour <= 22; hour++) {
            for (let minute = 0; minute < 60; minute += 30) {
                const totalMinutes = hour * 60 + minute;
                
                if (totalMinutes > fromTotalMinutes && hour <= 22) {
                    const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                    const option = document.createElement('option');
                    option.value = timeString;
                    option.textContent = timeString;
                    timeTo.appendChild(option);
                }
            }
        }
        
        this.calculatePrice();
    }

    calculatePrice() {
        const timeFrom = document.getElementById('timeFrom').value;
        const timeTo = document.getElementById('timeTo').value;
        
        if (!timeFrom || !timeTo || !this.selectedStadium) return;
        
        const hours = this.bookingManager.calculateHours(timeFrom, timeTo);
        const pricePerHour = this.selectedStadium.price_per_hour;
        const totalPrice = hours * pricePerHour;
        
        document.getElementById('pricePerHour').textContent = `‡∏ø${pricePerHour}`;
        document.getElementById('totalHours').textContent = `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
        document.getElementById('totalPrice').textContent = `‡∏ø${totalPrice}`;
    }

    async checkConflicts() {
        const stadiumName = this.selectedStadium?.name;
        const date = document.getElementById('bookingDate').value;
        const timeFrom = document.getElementById('timeFrom').value;
        const timeTo = document.getElementById('timeTo').value;
        
        if (!stadiumName || !date || !timeFrom || !timeTo) {
            document.getElementById('conflictResult').style.display = 'none';
            return;
        }
        
        try {
            const result = await this.bookingManager.checkBookingConflicts(
                stadiumName, date, timeFrom, timeTo
            );
            
            const conflictDiv = document.getElementById('conflictResult');
            
            if (result.hasConflict) {
                conflictDiv.className = 'conflict-result error';
                conflictDiv.innerHTML = `
                    <h4>‚ö†Ô∏è ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥</h4>
                    <p>‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ${result.conflicts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</p>
                    <ul>
                        ${result.conflicts.map(conflict => `
                            <li>${conflict.booker_name} - ${conflict.time_from} ‡∏ñ‡∏∂‡∏á ${conflict.time_to}</li>
                        `).join('')}
                    </ul>
                    <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô</p>
                `;
                conflictDiv.style.display = 'block';
                document.getElementById('nextBtn').disabled = true;
            } else {
                conflictDiv.className = 'conflict-result success';
                conflictDiv.innerHTML = `
                    <h4>‚úÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏á</h4>
                    <p>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ</p>
                `;
                conflictDiv.style.display = 'block';
                document.getElementById('nextBtn').disabled = false;
            }
            
        } catch (error) {
            console.error('Error checking conflicts:', error);
        }
    }

    nextStep() {
        if (!this.validateCurrentStep()) return;
        
        if (this.currentStep < 4) {
            this.currentStep++;
            this.updateStepDisplay();
            
            if (this.currentStep === 2) {
                this.showSelectedStadiumInfo();
            } else if (this.currentStep === 3) {
                this.showBookingSummary();
            }
        }
    }

    prevStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateStepDisplay();
        }
    }

    validateCurrentStep() {
        switch (this.currentStep) {
            case 1:
                if (!this.selectedStadium) {
                    this.showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°', '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠', 'warning');
                    return false;
                }
                return true;
                
            case 2:
                const form = document.getElementById('bookingForm');
                const formData = new FormData(form);
                
                const required = ['bookerName', 'bookerPhone', 'bookingDate', 'timeFrom', 'timeTo'];
                for (let field of required) {
                    if (!formData.get(field)) {
                        this.showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å${this.getFieldLabel(field)}`, 'warning');
                        return false;
                    }
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥
                const conflictDiv = document.getElementById('conflictResult');
                if (conflictDiv.classList.contains('error')) {
                    this.showAlert('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô', 'error');
                    return false;
                }
                
                return true;
                
            case 3:
                const paymentSlip = document.getElementById('paymentSlip').files[0];
                if (!paymentSlip) {
                    this.showAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', 'warning');
                    return false;
                }
                return true;
                
            default:
                return true;
        }
    }

    getFieldLabel(field) {
        const labels = {
            'bookerName': '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
            'bookerPhone': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
            'bookingDate': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
            'timeFrom': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°',
            'timeTo': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'
        };
        return labels[field] || field;
    }

    updateStepDisplay() {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Step Indicator
        document.querySelectorAll('.step').forEach((step, index) => {
            if (index + 1 <= this.currentStep) {
                step.classList.add('active');
            } else {
                step.classList.remove('active');
            }
        });
        
        // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Step Content
        document.querySelectorAll('.booking-step').forEach((step, index) => {
            if (index + 1 === this.currentStep) {
                step.classList.add('active');
            } else {
                step.classList.remove('active');
            }
        });
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');
        
        prevBtn.style.display = this.currentStep > 1 ? 'block' : 'none';
        nextBtn.style.display = this.currentStep < 3 ? 'block' : 'none';
        submitBtn.style.display = this.currentStep === 3 ? 'block' : 'none';
    }

    showSelectedStadiumInfo() {
        const infoDiv = document.getElementById('selectedStadiumInfo');
        infoDiv.innerHTML = `
            <h3>‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</h3>
            <div class="stadium-info">
                <h4>${this.selectedStadium.name}</h4>
                <p>üìç ${this.selectedStadium.address}</p>
                <p>üí∞ ‡∏ø${this.selectedStadium.price_per_hour}/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
                <p>‚è∞ ‡πÄ‡∏õ‡∏¥‡∏î ${this.selectedStadium.open_time} - ${this.selectedStadium.close_time}</p>
                ${this.selectedStadium.description ? `<p>‚ÑπÔ∏è ${this.selectedStadium.description}</p>` : ''}
            </div>
        `;
    }

    showBookingSummary() {
        const form = document.getElementById('bookingForm');
        const formData = new FormData(form);
        
        const hours = this.bookingManager.calculateHours(
            formData.get('timeFrom'),
            formData.get('timeTo')
        );
        const totalPrice = hours * this.selectedStadium.price_per_hour;
        
        const summaryDiv = document.getElementById('bookingSummary');
        summaryDiv.innerHTML = `
            <h3>‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
            <div class="booking-summary-details">
                <p><strong>‡∏™‡∏ô‡∏≤‡∏°:</strong> ${this.selectedStadium.name}</p>
                <p><strong>‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</strong> ${formData.get('bookerName')}</p>
                <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> ${formData.get('bookerPhone')}</p>
                <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${this.formatDate(formData.get('bookingDate'))}</p>
                <p><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${formData.get('timeFrom')} - ${formData.get('timeTo')}</p>
                <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:</strong> ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
                <p><strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</strong> ‡∏ø${totalPrice}</p>
                ${formData.get('specialRequirements') ? 
                    `<p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©:</strong> ${formData.get('specialRequirements')}</p>` : ''}
            </div>
        `;
    }

    updatePaymentInfo() {
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
        const bankInfo = document.getElementById('bankTransferInfo');
        const qrInfo = document.getElementById('qrCodeInfo');
        
        if (paymentMethod === 'bank_transfer') {
            bankInfo.style.display = 'block';
            qrInfo.style.display = 'none';
        } else if (paymentMethod === 'qr_code') {
            bankInfo.style.display = 'none';
            qrInfo.style.display = 'block';
        }
    }

    handleFileUpload(event) {
        const file = event.target.files[0];
        const preview = document.getElementById('filePreview');
        
        if (file) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'application/pdf'];
            if (!allowedTypes.includes(file.type)) {
                this.showAlert('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG, PNG, GIF) ‡∏´‡∏£‡∏∑‡∏≠ PDF', 'error');
                event.target.value = '';
                return;
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
            if (file.size > 10 * 1024 * 1024) {
                this.showAlert('‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ', '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB', 'error');
                event.target.value = '';
                return;
            }
            
            this.paymentSlipFile = file;
            
            // ‡πÅ‡∏™‡∏î‡∏á preview
            preview.innerHTML = `
                <div class="file-info">
                    <span class="file-name">${file.name}</span>
                    <span class="file-size">(${(file.size / 1024 / 1024).toFixed(2)} MB)</span>
                </div>
            `;
            preview.style.display = 'block';
        }
    }

    async submitBooking() {
        try {
            this.showLoading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...');
            
            // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            const form = document.getElementById('bookingForm');
            const formData = new FormData(form);
            
            const bookingData = {
                stadium_name: this.selectedStadium.name,
                booker_name: formData.get('bookerName'),
                booker_phone: formData.get('bookerPhone'),
                booker_email: formData.get('bookerEmail'),
                booking_date: formData.get('bookingDate'),
                time_from: formData.get('timeFrom'),
                time_to: formData.get('timeTo'),
                payment_method: document.querySelector('input[name="paymentMethod"]:checked').value,
                special_requirements: formData.get('specialRequirements')
            };
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            const bookingResult = await this.bookingManager.createBooking(bookingData);
            
            if (!bookingResult.success) {
                throw new Error(bookingResult.error);
            }
            
            this.currentBooking = bookingResult.data;
            
            // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            this.showLoading('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ...');
            
            const uploadResult = await this.bookingManager.uploadPaymentSlip(
                this.paymentSlipFile,
                this.currentBooking.id
            );
            
            if (!uploadResult.success) {
                throw new Error(uploadResult.error);
            }
            
            this.hideLoading();
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            this.currentStep = 4;
            this.updateStepDisplay();
            this.showBookingSuccess();
            
        } catch (error) {
            console.error('Error submitting booking:', error);
            this.hideLoading();
            this.showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message, 'error');
        }
    }

    showBookingSuccess() {
        document.getElementById('bookingId').textContent = this.currentBooking.id;
        
        const detailsDiv = document.getElementById('finalBookingDetails');
        detailsDiv.innerHTML = `
            <h4>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h4>
            <p><strong>‡∏™‡∏ô‡∏≤‡∏°:</strong> ${this.currentBooking.stadium_name}</p>
            <p><strong>‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</strong> ${this.currentBooking.booker_name}</p>
            <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${this.formatDate(this.currentBooking.booking_date)}</p>
            <p><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${this.currentBooking.time_from} - ${this.currentBooking.time_to}</p>
            <p><strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</strong> ‡∏ø${this.currentBooking.total_price}</p>
            <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
        `;
    }

    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            weekday: 'long'
        });
    }

    showLoading(text = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...') {
        document.getElementById('loadingText').textContent = text;
        document.getElementById('loadingOverlay').style.display = 'flex';
    }

    hideLoading() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }

    showAlert(title, message, type = 'info') {
        const modal = document.getElementById('alertModal');
        const icon = document.getElementById('modalIcon');
        const titleEl = document.getElementById('modalTitle');
        const messageEl = document.getElementById('modalMessage');
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        };
        
        icon.textContent = icons[type] || icons['info'];
        titleEl.textContent = title;
        messageEl.textContent = message;
        
        modal.style.display = 'flex';
    }

    hideAlert() {
        document.getElementById('alertModal').style.display = 'none';
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', () => {
    new BookingPage();
});